{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1XP0dsb-T3ORPYv4YQFV5j23PknFH06O6","timestamp":1731345073301}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"MXXTuy_o0sjk"},"outputs":[],"source":["!pip install -q -U kaggle_environments"]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import random\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from kaggle_environments import make, evaluate"],"metadata":{"id":"yz23vWHD0wcj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Опишем поведение агента, всегда играющего \"камень\" - это значение 0"],"metadata":{"id":"0kuo6IOxiRub"}},{"cell_type":"code","source":["%%writefile rock_agent.py\n","\n","#Example of the simple agent\n","#0 - rock\n","#1 - paper\n","#2 - scissors\n","def your_agent(observation, configuration):\n","    return 0"],"metadata":{"id":"bqTqV7B92rJ6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Попробуем теперь использовать информацию о прошлых действиях противника. Опишем агента, который производит то же самое действие, что и оппонент на прошлом ходу"],"metadata":{"id":"et1J5hUGigeh"}},{"cell_type":"code","source":["%%writefile copy_opponent.py\n","\n","#Example\n","def copy_opponent(observation, configuration):\n","    #in case we have information about opponent last move\n","    if observation.step > 0:\n","        return observation.lastOpponentAction\n","    #initial step\n","    else:\n","        return random.randrange(0, configuration.signs)"],"metadata":{"id":"7l6Ttw6qi0jk"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Воспользуемся функцией evaluate из библиотеки kaggle_environments с помощью которой запустим наших агентов и проведем эксперимент на заданном количестве игр"],"metadata":{"id":"ExgIpXUVjbjN"}},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"copy_opponent.py\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"wv6Ip6M004xa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["evaluate(\n","    \"rps\", #environment to use - no need to change\n","    [\"rock_agent.py\", \"paper\"], #agents to evaluate\n","    configuration={\"episodeSteps\": 100} #number of episodes\n",")"],"metadata":{"id":"FC6_QWe9k3rr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import random\n","# Определяем возможные ходы и правила выигрыша.\n","MOVES = ['rock', 'paper', 'scissors']\n","# Задаем словарь, в котором прописаныв победные комбинации\n","WIN_RULES = {\n","    ('rock', 'scissors'): 'win',\n","    ('scissors', 'paper'): 'win',\n","    ('paper', 'rock'): 'win'\n","}\n","\n","def rock_bot(_):\n","  \"\"\"\n","  Бот, всегда выбирающий камень\n","  \"\"\"\n","  return 'rock'\n","\n","def paper_bot(_):\n","  \"\"\"\n","  Бот, всегда выбирающий бумагу\n","  \"\"\"\n","  return 'paper'\n","\n","def scissors_bot(_):\n","  \"\"\"\n","  Бот, всегда выбирающий ножницы\n","  \"\"\"\n","  return 'scissors'\n","\n","def random_bot(_):\n","  \"\"\"\n","  Бот, выбирающий случайный ход\n","  \"\"\"\n","  return random.choice(MOVES)\n","\n","# Каждая функция-бот принимает на вход список history, в котором хранится история ходов предыдущих раундов, и возвращает выбранный ход.\n","\n","def copy_last_opponent(history):\n","  \"\"\"\n","  Бот, копирующий последний ход противника\n","  Если история пуста, выбирает случайный ход\n","  \"\"\"\n","  return history[-1][0] if history else random.choice(MOVES)\n","\n","def beat_last_opponent(history):\n","  \"\"\"\n","  Бот, выбирающий ход, который побеждает последний ход противника\n","  Если последний ход противника \"rock\", возвращает \"paper\"; если \"paper\", возвращает \"scissors\"; если \"scissors\", возвращает \"rock\"\n","  \"\"\"\n","  if not history:\n","      return random.choice(MOVES)\n","  last_move = history[-1][0]\n","  return 'paper' if last_move == 'rock' else 'scissors' if last_move == 'paper' else 'rock'\n","\n","def cycle_choices(history):\n","  \"\"\"\n","  Бот, циклично выбирающий ходы в порядке камень-бумага-ножницы\n","  \"\"\"\n","  if not history:\n","      return random.choice(MOVES)\n","  return MOVES[(MOVES.index(history[-1][1]) + 1) % 3]\n","\n","def counter_cycle(history):\n","  \"\"\"\n","  Бот, выбирающий ход в обратном цикличном порядке\n","  \"\"\"\n","  if not history:\n","      return random.choice(MOVES)\n","  return MOVES[(MOVES.index(history[-1][1]) - 1) % 3]\n","\n","def predict_opponent(history):\n","  \"\"\"\n","  Бот, предсказывающий следующий ход противника на основе последних двух ходов\n","  Если два последних хода соперника были одинаковыми, выбирает победный ход к этому выбору\n","  \"\"\"\n","  if len(history) < 2:\n","      return random.choice(MOVES)\n","  last_two = [move[0] for move in history[-2:]]\n","  return 'paper' if last_two == ['rock', 'rock'] else 'scissors' if last_two == ['paper', 'paper'] else 'rock'\n","\n","def frequency_based(history):\n","  \"\"\"\n","  Бот, выбирающий ход на основе частоты ходов противника\n","  \"\"\"\n","  if not history:\n","      return random.choice(MOVES)\n","  freq = {move: sum(1 for h in history if h[0] == move) for move in MOVES}\n","  return max(freq, key=freq.get)\n","\n","def random_bias_rock(_):\n","  \"\"\"\n","  Бот с случайным выбором, но с предпочтением к камню\n","  \"\"\"\n","  return random.choices(['rock', 'paper', 'scissors'], [0.5, 0.25, 0.25])[0]\n","\n","def random_bias_paper(_):\n","  \"\"\"\n","  Бот с случайным выбором, но с предпочтением к бумаге\n","  \"\"\"\n","\n","  return random.choices(['rock', 'paper', 'scissors'], [0.25, 0.5, 0.25])[0]\n","\n","def random_bias_scissors(_):\n","  \"\"\"\n","  Бот с случайным выбором, но с предпочтением к ножницам\n","  \"\"\"\n","\n","  return random.choices(['rock', 'paper', 'scissors'], [0.25, 0.25, 0.5])[0]\n","\n","def play_round(bot1, bot2, history1, history2):\n","  \"\"\"\n","  Один раунд игры между двумя ботами\n","  \"\"\"\n","  move1 = bot1(history1)\n","  move2 = bot2(history2)\n","  \"\"\"\n","  Записываем ходы в историю каждого бота\n","  \"\"\"\n","  history1.append((move2, move1))\n","  history2.append((move1, move2))\n","  \"\"\"\n","  Возвращаем 1, если первый бот выиграл, -1, если выиграл второй и 0 в случае ничьей\n","  \"\"\"\n","  if move1 == move2:\n","      return 0\n","  return 1 if WIN_RULES.get((move1, move2)) == 'win' else -1\n","\n","def tournament(bots, num_games=100):\n","  \"\"\"\n","  Функция турнира, где каждый бот играет с каждым несколько игр\n","  Обновляем счетчик scores после каждой игры\n","  \"\"\"\n","  scores = {bot.__name__: 0 for bot in bots}\n","  for i in range(len(bots)):\n","      for j in range(i + 1, len(bots)):\n","          bot1, bot2 = bots[i], bots[j]\n","          history1, history2 = [], []\n","          for _ in range(num_games):\n","              result = play_round(bot1, bot2, history1, history2)\n","              if result == 1:\n","                  scores[bot1.__name__] += 1\n","              elif result == -1:\n","                  scores[bot2.__name__] += 1\n","  \"\"\"\n","  Возвращаем словарь с результатами\n","  \"\"\"\n","  return scores\n","\n","# Задаём список ботов\n","\n","bots = [\n","    random_bot, rock_bot, paper_bot, scissors_bot, copy_last_opponent,\n","    beat_last_opponent, cycle_choices, counter_cycle, predict_opponent,\n","    frequency_based, random_bias_rock, random_bias_paper, random_bias_scissors\n","]\n","\n","# Запускаем турнир\n","results = tournament(bots, num_games=100)\n","\n","# Выводим результаты\n","for bot_name, score in results.items():\n","    print(f\"{bot_name}: {score}\")"],"metadata":{"id":"Lfl6fR4YDI-V","executionInfo":{"status":"ok","timestamp":1731344426634,"user_tz":-180,"elapsed":1057,"user":{"displayName":"112ww3 Rtd","userId":"14173893094183960306"}},"outputId":"d226a4c4-8c1d-436d-b018-a5d449b60847","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["random_bot: 415\n","rock_bot: 288\n","paper_bot: 296\n","scissors_bot: 303\n","copy_last_opponent: 269\n","beat_last_opponent: 624\n","cycle_choices: 472\n","counter_cycle: 441\n","predict_opponent: 625\n","frequency_based: 213\n","random_bias_rock: 407\n","random_bias_paper: 365\n","random_bias_scissors: 368\n"]}]}]}